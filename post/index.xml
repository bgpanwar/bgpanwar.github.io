<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Data Pond</title>
    <link>https://bgpanwar.github.io/post/</link>
    <description>Recent content in Posts on Data Pond</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bgpanwar.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scatter</title>
      <link>https://bgpanwar.github.io/post/scatter/</link>
      <pubDate>Sat, 01 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bgpanwar.github.io/post/scatter/</guid>
      <description>Load the data.
subscribers &amp;lt;- read.csv(&amp;quot;C:/Users/Bhawna/Documents/blog/data/flowingdata_subscribers.csv&amp;quot;, sep=&amp;quot;,&amp;quot;, header=TRUE)View(subscribers)Default plot with points.
plot(subscribers$Subscribers)Default plot with type explicity specified.
plot(subscribers$Subscribers, type=&amp;quot;p&amp;quot;, ylim=c(0, 30000))Draw vertical lines.
plot(subscribers$Subscribers, type=&amp;quot;h&amp;quot;, ylim=c(0, 30000))Draw points with above lines.
plot(subscribers$Subscribers, type=&amp;quot;h&amp;quot;, ylim=c(0, 30000))points(subscribers$Subscribers)Edits with colors and labels.
plot(subscribers$Subscribers, type=&amp;quot;h&amp;quot;, ylim=c(0, 30000), xlab=&amp;quot;Day&amp;quot;, ylab=&amp;quot;Subscribers&amp;quot;)points(subscribers$Subscribers, pch=19, col=&amp;quot;blue&amp;quot;) Reference:The data was downloaded from the following website website.</description>
    </item>
    
    <item>
      <title>Times Series</title>
      <link>https://bgpanwar.github.io/post/times-series/</link>
      <pubDate>Sat, 01 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bgpanwar.github.io/post/times-series/</guid>
      <description># Load datapopulation &amp;lt;- read.csv(&amp;quot;C:/Users/Bhawna/Documents/blog/data/world-population.csv&amp;quot;, sep=&amp;quot;,&amp;quot;, header=TRUE)# Default plotplot(population$Year, population$Population, type=&amp;quot;l&amp;quot;)# Adjust axisplot(population$Year, population$Population, type=&amp;quot;l&amp;quot;, ylim=c(0, 7000000000), xlab=&amp;quot;Year&amp;quot;, ylab=&amp;quot;Population&amp;quot;)Reference: world_population.csv was obtained from Flowdata.com</description>
    </item>
    
    <item>
      <title>How does the Bootstrap method work?</title>
      <link>https://bgpanwar.github.io/post/bootstrap/</link>
      <pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bgpanwar.github.io/post/bootstrap/</guid>
      <description>Question of the day?Suppose we have a normal population with a mean of 3 and a standard deviation of 1, how would we illustrate the bootstrap method here?
set.seed(1)srs &amp;lt;- rnorm(25, mean=3)resamps &amp;lt;- replicate(1000, sample(srs, 25, TRUE), simplify = FALSE)x_bar_star &amp;lt;- sapply(resamps, mean, simplify =TRUE)Let’s create a histogram here and fit normal curve.
hist(x_bar_star, breaks = 40, prob = TRUE)curve(dnorm(x, 3, 0.2), add = TRUE) We can calculate the difference now.</description>
    </item>
    
    <item>
      <title>Spam Filter</title>
      <link>https://bgpanwar.github.io/post/spam-filter/</link>
      <pubDate>Sat, 15 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bgpanwar.github.io/post/spam-filter/</guid>
      <description>Perform the SMS spam filtering analysis. Produce a report explaining the data, the analysis, and the findings. Organize you report using the Five Steps. Show the prediction that the algorithm produced. Give the Accuracy of the predictions. Include the confusion matrix.Find an interesting dataset that is appropriate for applying the naive Bayes algorithm, try to load the data into R, and proceed to classify the data using naive Bayes.Problem#1: Filtering spam SMS messagesStep 2: Exploring and preparing the data —-# read the sms data into the sms data framesms_raw &amp;lt;- read.</description>
    </item>
    
  </channel>
</rss>